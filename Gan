-- External executor script

-- References to folders and specific parts
local clovaFolder = game:GetService("Workspace"):WaitForChild("clova")
local buttonsFolder = game:GetService("Workspace"):WaitForChild("Buttons")
local rollRarityTouch = game:GetService("Workspace")["Roll System"]:WaitForChild("RollRarity")
local normalRuneRollRarity = game:GetService("Workspace").normal.runez:WaitForChild("RollRarity")

local player = game.Players.LocalPlayer -- Reference to the player
local character = player.Character or player.CharacterAdded:Wait() -- Ensure character is loaded
local rootPart = character:WaitForChild("HumanoidRootPart") -- Get the player's root part

local FIRE_RADIUS = 200 -- Radius within which buttons will be processed

-- Function to process TouchTransmitter of a given part
local function processTouchTransmitter(part)
    local touchTransmitter = part:FindFirstChildOfClass("TouchTransmitter") -- Find TouchTransmitter
    if touchTransmitter then
        -- Fire the TouchTransmitter
        firetouchinterest(part, rootPart, 0)
        firetouchinterest(part, rootPart, 1)
    end
end

-- Function to monitor the clova folder
local function monitorClovaFolder()
    while true do
        for _, model in ipairs(clovaFolder:GetChildren()) do
            if model:IsA("Model") then -- Process all models
                local rootPart = model:FindFirstChild("Root") -- Check for the "Root" part
                if rootPart and rootPart:IsA("BasePart") then
                    processTouchTransmitter(rootPart)
                end
            end
        end
        wait(0.1) -- Independent loop delay
    end
end

-- Function to handle the RollRarity TouchInterest
local function monitorRollRarity()
    while true do
        if rollRarityTouch and rollRarityTouch:IsA("BasePart") then
            processTouchTransmitter(rollRarityTouch)
        end
        wait(0.1) -- Independent loop delay
    end
end

-- Function to handle the normal.runez.RollRarity TouchInterest
local function monitorNormalRuneRollRarity()
    while true do
        if normalRuneRollRarity and normalRuneRollRarity:IsA("BasePart") then
            processTouchTransmitter(normalRuneRollRarity)
        end
        wait(0.1) -- Independent loop delay
    end
end

-- Function to monitor a single button
local function monitorButton(button)
    while true do
        if button:IsA("BasePart") then
            local distance = (button.Position - rootPart.Position).Magnitude
            -- Check if the button is within range and its material is Neon
            if distance <= FIRE_RADIUS and button.Material == Enum.Material.Neon then
                processTouchTransmitter(button)
                wait(0.2) -- Delay between firings for this button
            else
                wait(0.1) -- Short delay if conditions aren't met
            end
        end
    end
end

-- Start independent loops for each button in the folder
local function monitorAllButtons()
    for _, button in ipairs(buttonsFolder:GetChildren()) do
        if button:IsA("BasePart") then
            task.spawn(monitorButton, button) -- Create an independent loop for each button
        end
    end
end

-- Start all functions in independent threads
task.spawn(monitorClovaFolder)
task.spawn(monitorRollRarity)
task.spawn(monitorNormalRuneRollRarity)
monitorAllButtons() -- Start monitoring all buttons
