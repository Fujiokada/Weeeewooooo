-- Variables
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local folder = workspace:WaitForChild("SpawnedEnemies")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local teleportEnabled = false -- Toggle state
local teleportParts = {} -- Table to store parts with TouchTransmitter for loop teleportation
local bombModels = {} -- Table to store bomb models for loop teleportation

-- Function to teleport objects in front of the player
local function teleportInFront(object)
    local frontPosition = rootPart.CFrame * CFrame.new(0, 0, -20)
    if object:IsA("BasePart") then
        object.CFrame = frontPosition
    elseif object:IsA("Model") then
        local primaryPart = object.PrimaryPart or object:FindFirstChildWhichIsA("BasePart")
        if primaryPart then
            object:SetPrimaryPartCFrame(frontPosition)
        end
    end
end

-- Function to teleport enemies in front of the player
local function teleportEnemies()
    for _, enemy in ipairs(folder:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
            teleportInFront(enemy.HumanoidRootPart)
        end
    end
end

-- Toggle function for loop
local function toggleTeleport()
    teleportEnabled = not teleportEnabled -- Toggle on/off
    print("Teleport Toggled:", teleportEnabled)
end

-- Listen for key press to toggle teleporting enemies
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end -- Ignore if the game UI is consuming the input
    if input.KeyCode == Enum.KeyCode.P then
        toggleTeleport()
    end
end)

-- Detect when new enemies are added to the folder
folder.ChildAdded:Connect(function(child)
    if teleportEnabled and child:IsA("Model") and child:FindFirstChild("HumanoidRootPart") then
        teleportInFront(child.HumanoidRootPart)
    end
end)

-- Detect and add parts with TouchTransmitter to the loop
workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("BasePart") and descendant:FindFirstChildOfClass("TouchTransmitter") then
        print("Part with TouchTransmitter detected:", descendant.Name)
        teleportParts[descendant] = true -- Add part to loop table
    end
end)

-- Detect when a Model named "Bomb" is added to the workspace
workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child.Name == "Bomb" then
        print("Bomb model detected:", child.Name)
        bombModels[child] = true -- Add bomb to loop table
    end
end)

-- Loop to teleport parts with TouchTransmitter and bombs in front of the player
runService.RenderStepped:Connect(function()
    -- Teleport TouchTransmitter parts
    for part in pairs(teleportParts) do
        if part and part.Parent then
            teleportInFront(part) -- Continuously teleport the part in front of the player
        else
            teleportParts[part] = nil -- Clean up invalid parts
        end
    end

    -- Teleport bomb models
    for bomb in pairs(bombModels) do
        if bomb and bomb.Parent then
            teleportInFront(bomb) -- Continuously teleport the bomb in front of the player
        else
            bombModels[bomb] = nil -- Clean up invalid bomb models
        end
    end

    -- Teleport enemies if enabled
    if teleportEnabled then
        teleportEnemies()
    end
end)
