-- External executor script

-- References to folders and specific parts
local clovaFolder = game:GetService("Workspace"):WaitForChild("clova")
local buttonsFolder = game:GetService("Workspace"):WaitForChild("Buttons")
local rollRarityTouch = game:GetService("Workspace")["Roll System"]:WaitForChild("RollRarity")

local player = game.Players.LocalPlayer -- Reference to the player
local character = player.Character or player.CharacterAdded:Wait() -- Ensure character is loaded
local rootPart = character:WaitForChild("HumanoidRootPart") -- Get the player's root part

local FIRE_RADIUS = 200 -- Radius within which parts will be processed
local REBIRTH_COOLDOWN = 5 -- Cooldown for firing the rebirth button
local lastRebirthTime = 0 -- Tracks the last time the rebirth button was pressed

-- Function to process TouchTransmitter of a given part
local function processTouchTransmitter(part)
    local touchTransmitter = part:FindFirstChildOfClass("TouchTransmitter") -- Find TouchTransmitter
    if touchTransmitter then
        -- Fire the TouchTransmitter
        firetouchinterest(part, rootPart, 0)
        firetouchinterest(part, rootPart, 1)
    end
end

-- Multiplier buttons processing order
local multiplierButtons = {
    buttonsFolder.Rare,
    buttonsFolder.Legendary,
    buttonsFolder:GetChildren()[20],
    buttonsFolder.Ultimate,
    buttonsFolder.Overdrive,
    buttonsFolder.Unknown,
    buttonsFolder:GetChildren()[45],
    buttonsFolder.Celestial,
    buttonsFolder.Overlord,
    buttonsFolder["50"],
    buttonsFolder["64"],
    buttonsFolder:GetChildren()[31],
    buttonsFolder:GetChildren()[32],
    buttonsFolder:GetChildren()[33],
    buttonsFolder["160"],
    buttonsFolder["200"]
}

-- Rebirth button
local rebirthButton = buttonsFolder["Rebirth Get"]

-- Rebirth upgrades processing order
local rebirthUpgrades = {
    buttonsFolder:GetChildren()[12],
    buttonsFolder:GetChildren()[6],
    buttonsFolder.Rebirth1,
    buttonsFolder.Rebirth2,
    buttonsFolder["Rebirth Upgrade 6"],
    buttonsFolder["Rebirth Upgrade 7"]
}

-- Function to process multiplier buttons in order
local function processMultiplierButtons()
    for _, button in ipairs(multiplierButtons) do
        if button and button:IsA("BasePart") and button.Material == Enum.Material.Neon then
            processTouchTransmitter(button)
            break -- Stop firing once a higher-priority button is processed
        end
    end
end

-- Function to process rebirth upgrades in order
local function processRebirthUpgrades()
    for _, upgrade in ipairs(rebirthUpgrades) do
        if upgrade and upgrade:IsA("BasePart") and upgrade.Material == Enum.Material.Neon then
            processTouchTransmitter(upgrade)
        end
    end
end

-- Function to monitor the clova folder
local function monitorClovaFolder()
    while true do
        for _, model in ipairs(clovaFolder:GetChildren()) do
            if model:IsA("Model") and (model.Name == "four" or model.Name == "three") then
                local rootPart = model:FindFirstChild("Root")
                if rootPart and rootPart:IsA("BasePart") then
                    processTouchTransmitter(rootPart)
                end
            end
        end
        wait(1) -- Independent loop delay
    end
end

-- Function to handle the RollRarity TouchInterest
local function monitorRollRarity()
    while true do
        if rollRarityTouch and rollRarityTouch:IsA("BasePart") then
            processTouchTransmitter(rollRarityTouch)
        end
        wait(1) -- Independent loop delay
    end
end

-- Function to process other buttons based on proximity and material
local function processOtherButtons()
    while true do
        for _, button in ipairs(buttonsFolder:GetChildren()) do
            if button:IsA("BasePart") or button:IsA("MeshPart") then
                local distance = (button.Position - rootPart.Position).Magnitude
                if distance <= FIRE_RADIUS and button.Material == Enum.Material.Neon then
                    processTouchTransmitter(button)
                end
            end
        end
        wait(0.5) -- Delay for other buttons
    end
end

-- Main cycle for prioritized tasks
while true do
    -- Process multiplier buttons
    processMultiplierButtons()
    wait(0.1) -- Small delay before rebirth logic

    -- Process rebirth button every 5 seconds
    if tick() - lastRebirthTime >= REBIRTH_COOLDOWN and rebirthButton.Material == Enum.Material.Neon then
        processTouchTransmitter(rebirthButton)
        lastRebirthTime = tick()
    end

    -- Process rebirth upgrades
    processRebirthUpgrades()
    wait(0.1) -- Main loop delay for prioritized tasks
end

-- Start independent monitors
task.spawn(monitorClovaFolder)
task.spawn(monitorRollRarity)
task.spawn(processOtherButtons)
