local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillNames = {"Lion's Slash", "Nadeshiko Field", "Conqueror's Will"}
local teleportPosition = Vector3.new(232, 3, -703)
local questNPCPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

local lastSkillUse = 0
local isCharacterAliveFlag = false
local HealthFlag = true
local deathNotificationSent = false  -- Track if the death notification has been sent
local combatPauseNotified = false
local healthCriticalNotified = false
local Nadeshik = false
local notifiedEnemies = {}
local respawnCharacter 
local isCharacterAlive
local isRespawning = false 
local ensureCharacterIsAlive
local webhookURL = "https://discord.com/api/webhooks/1306244225725370471/wFVYW4SdmUMhvPOxqTY0VncLWLEtArsrGs3lnzSu38aKpHdlP84FD6IbcWCgqJ5Z1wyS"
local webhookURL2 = "https://discord.com/api/webhooks/1307349029838913576/gOk1wJEerT9PAfMdh9M0Og12QuPuIqx9Jm3gofYGNPt82D6LjKKgzc4MbHHBonLkO7iA"

local function resetNotifiedEnemies()
    notifiedEnemies = {}
end

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

-- Discord webhook notifier
local function sendDiscordNotification(status, details)
    local data = {
        ["username"] = "Quest Notifier",
        ["embeds"] = {{
            ["title"] = "**Quest Update: " .. status .. "**",
            ["description"] = details,
            ["color"] = status == "Quest Completed" and 65280 or 16711680,  -- Green for completion, Red for retake
            ["footer"] = {
                ["text"] = "Roblox Quest Notifier",
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")  -- UTC time
        }}
    }

    local jsonData = game:GetService("HttpService"):JSONEncode(data)

    pcall(function()
        syn.request({
            Url = webhookURL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    end)
end

local function sendBossKillNotification(enemyName, enemyType)
    local data = {
        ["username"] = "Boss Kill Notifier",
        ["embeds"] = {{
            ["title"] = "**Enemy Defeated: " .. enemyName .. "**",
            ["description"] = "Type: " .. enemyType .. "\nPlayer: Venqtrix",
            ["color"] = 16766720, -- Orange for boss/special enemy kill
            ["footer"] = {
                ["text"] = "Roblox Enemy Kill Notifier",
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ") -- UTC time
        }}
    }

    local jsonData = game:GetService("HttpService"):JSONEncode(data)

    pcall(function()
        syn.request({
            Url = webhookURL2,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    end)
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")

    -- Wait for character to respawn if deleted
    if not character then
        return false
    end

    -- Check if HumanoidRootPart exists
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return false
    end

    -- Check for SoulForm attachment
    local soulFormAttachment = humanoidRootPart:FindFirstChild("SoulForm")
    return soulFormAttachment == nil -- If SoulForm exists, character is "dead"; otherwise, "alive"
end


-- Create floating platform under the character
local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true

        game:GetService("RunService").Heartbeat:Connect(function()
            if Float.Parent and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, -3.1, 0)
            else
                Float:Destroy()
            end
        end)

        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function respawnCharacter()
    if isRespawning then return end -- Prevent overlapping respawns

    isRespawning = true
    sendNotification("Character Status", "Character is dead, respawning in 2 seconds...")
    wait(2)

    spawnRemote:FireServer(1) -- Server call to respawn
    wait(2) -- Allow time for the respawn process

    -- Wait for the character to fully respawn
    while not isCharacterAlive() do
        wait(0.5)
    end

    createFloatingPlatform() -- Recreate floating platform
    sendNotification("Character Status", "Character respawned successfully.")
    isRespawning = false -- Allow new respawn attempts
end


-- Ensure the character is alive or respawn if not
local function ensureCharacterIsAlive()
    while not isCharacterAlive() do
        respawnCharacter()
        wait(0.5) -- Ensure there's a short delay between checks
    end
end

-- Track respawn state to avoid conflicts
local isRespawning = false

-- Monitor health and respawn if necessary
local function monitorHealth()
    spawn(function()
        while true do
            if toggle and HealthFlag and not isRespawning and isCharacterAlive() then
                local character = player.Character
                if character and character:FindFirstChild("Humanoid") then
                    local humanoid = character.Humanoid
                    local healthPercentage = (humanoid.Health / humanoid.MaxHealth) * 100

                    if healthPercentage <= 40 then
                        -- Prevent resetting if already dead or respawning
                        if not isCharacterAlive() or isRespawning then
                            wait(0.5) -- Allow time for other processes
                        else
                            if not healthCriticalNotified then
                                sendNotification("Health Monitor", "Health critical. Resetting character.")
                                healthCriticalNotified = true -- Prevent repeated notifications
                            end
                            humanoid.Health = 0 -- Trigger character reset
                            ensureCharacterIsAlive() -- Wait for respawn to complete
                        end
                    else
                        healthCriticalNotified = false -- Reset flag when health is above threshold
                    end
                end
            end
            wait(0.5) -- Poll health every 0.5 seconds
        end
    end)
end


local function simulateHoldClick(duration)
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
    wait(duration)
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function unequipTool()
    local character = player.Character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

-- Function to check if Nadeshiko Field is active
local function isNadeshikoFieldActive()
    for _, part in ipairs(workspace.AtmosphereZones:GetChildren()) do
        if part:IsA("BasePart") and part.Name:find("NadeshikoField") then
            return true
        end
    end
    return false
end

-- Function to check if a skill tool is on cooldown
local function isSkillOnCooldown(tool)
    return tool and tool.Name:match("%d+")
end

local function activateSkills(currentEnemy)
    if not currentEnemy or not currentEnemy:FindFirstChild("Humanoid") then return end

    local humanoid = currentEnemy.Humanoid
    local healthPercentage = (humanoid.Health / humanoid.MaxHealth) * 100

    -- Check health to decide whether to use specific skills
    local shouldUseNadeshiko = healthPercentage > 30 -- Only use Nadeshiko Field if health > 30%
    local shouldUseConqueror = healthPercentage > 30 -- Only use Conqueror's Will if health > 30%

    unequipTool()

    -- Activate "Conqueror's Will" if conditions are met
    local conquerorWillTool = player.Backpack:FindFirstChild("Conqueror's Will")
    if shouldUseConqueror and conquerorWillTool then
        equipTool("Conqueror's Will")
        while not conquerorWillTool.Name:match("%d") do  -- Wait until the tool is on cooldown
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
            wait(0.1)
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
            wait(0.5)
        end
        unequipTool()
    end

    -- Activate "Lion's Slash" if available
    local lionSlashTool = player.Backpack:FindFirstChild("Lion's Slash")
    if lionSlashTool then
        equipTool("Lion's Slash")
        while not lionSlashTool.Name:match("%d") do  -- Wait until the tool is on cooldown
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
            wait(0.1)
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
            wait(0.5)
        end
        unequipTool()
    end

    -- Activate "Nadeshiko Field" only if the health is above 30% and it's not already active
    if shouldUseNadeshiko and not isNadeshikoFieldActive() then
        local nadeshikoTool = player.Backpack:FindFirstChild("Nadeshiko Field")
        if nadeshikoTool then
            equipTool("Nadeshiko Field")
            local holdDuration = 5 -- Simulate holding the tool for 5 seconds
            local startTime = tick()

            -- Keep trying to activate Nadeshiko Field while holding the tool
            while tick() - startTime < holdDuration do
                if isNadeshikoFieldActive() then
                    break
                end
                simulateHoldClick(0.1) -- Short click-hold intervals
            end

            unequipTool()
        end
    end

    -- Reequip the default tool
    equipTool(punchToolName)
    lastSkillUse = tick()
end

-- Additional check for teleport prevention when Nadeshiko Field is active
local function teleportToPositionIfNadeshikoInactive(position)
    if not isNadeshikoFieldActive() and not Nadeshik then
        player.Character:SetPrimaryPartCFrame(CFrame.new(position))
    else
        sendNotification("Teleport", "Teleportation blocked due to Nadeshiko Field.")
        Nadeshik = true
        if isNadeshikoFieldActive() then
            Nadeshik = false
        end
    end
end

local function hasQuest()
    -- Check if the player currently has the target quest
    local quest = questHolder:FindFirstChild("Quest")
    if quest and quest:FindFirstChild("QuestName") then
        return quest.QuestName.ContentText == targetQuestName
    end
    return false
end

local function isQuestCompleted()
    -- Check if the quest progress indicates completion (3/3)
    local questProgress = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    return questProgress and questProgress.Progress.ContentText == "3/3"
end

local function isLowHealth()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        local humanoid = player.Character.Humanoid
        return humanoid.Health <= humanoid.MaxHealth * 0.4
    end
    return false
end

local function getDialogueState()
    local player = game:GetService("Players").LocalPlayer
    local dialogueGui = player.PlayerGui:FindFirstChild("GameUI") and player.PlayerGui.GameUI:FindFirstChild("Dialogue")
    local currentlySpeaking = dialogueGui and dialogueGui:FindFirstChild("CurrentlySpeaking")
    local scrollingFrame = dialogueGui and dialogueGui:FindFirstChild("ScrollingFrame")
    
    if currentlySpeaking and currentlySpeaking.Value then
        if scrollingFrame then
            if scrollingFrame:FindFirstChild("ActiveQuest") then
                return "CompleteQuest" -- Dialogue for quest completion
            elseif scrollingFrame:FindFirstChild("AvailableQuests") then
                return "TakeRetakeQuest" -- Dialogue for taking or retaking quest
            end
        end
    end
    return nil -- Unable to determine state
end

local function interactWithNPC(npc)
    local prompt = npc:FindFirstChild("ProximityPrompt")
    if prompt then
        fireproximityprompt(prompt)
        wait(1)
        return true
    end
    sendNotification("Error", "Proximity prompt for NPC not found!")
    return false
end

local function processQuest(action)
    ensureCharacterIsAlive() -- Wait until the character is alive

    while isNadeshikoFieldActive() do
        wait(0.5) -- Wait until the Nadeshiko Field is inactive
    end

    local actionText = action == "CompleteQuest" and "complete the quest" or "take/retake the quest"
    sendNotification("Quest", "Teleporting to quest NPC to " .. actionText .. "...")
    
    local actionSucceeded = false
    
    while not actionSucceeded do
        ensureCharacterIsAlive() -- Verify character is still alive during the process
        
        teleportToPositionIfNadeshikoInactive(questNPCPosition)
        wait(1)
        
        local npc = workspace.NPCs:FindFirstChild("Agor")
        if npc and interactWithNPC(npc) then
            for _ = 1, 4 do
                ensureCharacterIsAlive() -- Ensure alive before interacting further
                if replicatedStorage.ClientRemotes:FindFirstChild("DialogueHandler") then
                    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
                    wait(1)
                else
                    sendNotification("Error", "DialogueHandler not found!")
                    return
                end
            end

            local dialogueState = getDialogueState()
            if dialogueState == action then
                replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
                wait(1)
                replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
                sendNotification("Quest", "Successfully handled " .. actionText .. ".")
                actionSucceeded = true
            else
                sendNotification("Error", "Dialogue mismatch! Retrying interaction...")
            end
        else
            sendNotification("Error", "Quest NPC not found in workspace or interaction failed!")
        end
        wait(1) -- Retry every second
    end
end

local function completeQuest()
    processQuest("CompleteQuest")
end

local function takeQuest()
    processQuest("TakeRetakeQuest")
end

-- Helper function to check if an enemy is a boss
local function isBoss(enemy)
    if enemy:FindFirstChild("Head") 
       and enemy.Head:FindFirstChild("billboardAtt")
       and enemy.Head.billboardAtt:FindFirstChild("BillboardGui")
       and enemy.Head.billboardAtt.BillboardGui:FindFirstChild("TextLabel") then

        local textLabel = enemy.Head.billboardAtt.BillboardGui.TextLabel
        local bossTypes = {"Rare Boss", "Epic Boss", "Legendary Boss", "Mythical Boss"}
        for _, bossType in ipairs(bossTypes) do
            if textLabel.Text == bossType then
                return true
            end
        end
    end
    return false
end

-- Helper function to check if an enemy is a special enemy
local function isSpecialEnemy(enemy)
    local specialEnemies = {"Demon", "Angel"}
    for _, specialName in ipairs(specialEnemies) do
        -- Check if the enemy's name contains the special name
        if enemy.Name:find(specialName) then
            return true
        end
    end
    return false
end

-- Flag to track whether the combat pause notification has been sent
local combatPauseNotified = false

local function attackEnemy(enemy)
    if isLowHealth() then return end -- Prevent attack if health is low

    -- Check if the enemy is a boss or special enemy
    local isEnemyBoss = isBoss(enemy)
    local isEnemySpecial = isSpecialEnemy(enemy)

    -- Notify only once per enemy
    if not notifiedEnemies[enemy] then
        if isEnemyBoss then
            sendNotification("Combat", "Engaging boss: " .. enemy.Name)
        elseif isEnemySpecial then
            sendNotification("Combat", "Engaging special enemy: " .. enemy.Name)
        else
            sendNotification("Combat", "Attacking enemy: " .. enemy.Name)
        end
        notifiedEnemies[enemy] = true -- Mark this enemy as notified
    end

    -- Exit combat if Nadeshiko Field becomes active
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() and HealthFlag and not isLowHealth() and not isNadeshikoFieldActive() do
        -- Validate character state before each action
        if not isCharacterAlive() then
            respawnCharacter()
            return -- Exit to handle respawn flow properly
        end

        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 7
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))

        -- Use skills after teleporting to each new enemy
        if tick() - lastSkillUse > 5 then
            activateSkills(enemy) -- Pass the enemy to check its health for Nadeshiko Field
        end

        equipTool(punchToolName)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
        wait(0.1)
    end

    -- Check if the enemy has been defeated
    if enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health <= 0 then
        if isEnemyBoss then
            sendNotification("Combat", "Boss defeated: " .. enemy.Name)
            sendBossKillNotification("Boss Defeated", "A boss named '" .. enemy.Name .. "' was defeated by Venqtrix.")
        elseif isEnemySpecial then
            sendNotification("Combat", "Special enemy defeated: " .. enemy.Name)
            sendBossKillNotification("Special Enemy Defeated", "A special enemy named '" .. enemy.Name .. "' was defeated by Venqtrix.")
        end

        notifiedEnemies[enemy] = nil -- Reset notification tracking for this enemy
    end

    -- Stop combat if Nadeshiko Field activates or if health drops
    if isNadeshikoFieldActive() or isLowHealth() then
        if not combatPauseNotified then
            sendNotification("Combat", "Combat paused due to Nadeshiko Field activation or low health.")
            combatPauseNotified = true -- Set the flag to prevent repeated notifications
        end
    else
        combatPauseNotified = false -- Reset the flag when the condition is no longer true
    end
end

-- Example activateSkills function
local function activateSkills(currentEnemy)
    if isLowHealth() then return end -- Prevent skill usage if health is low

    -- Existing skill logic here
end

-- Main loop: Combat and quest handling
spawn(function()
    while true do
        if toggle then
            ensureCharacterIsAlive() -- Ensure the character is alive at the start of each iteration

            -- Quest logic
            if not hasQuest() and not isNadeshikoFieldActive() then
                ensureCharacterIsAlive() -- Ensure character is alive before starting a quest
                sendNotification("Quest", "No active quest. Starting quest.")
                takeQuest()
                wait(1)
                resetNotifiedEnemies()
            elseif hasQuest() and isQuestCompleted() then
                ensureCharacterIsAlive() -- Ensure character is alive before completing a quest
                sendNotification("Quest", "Quest completed. Turning in.")
                completeQuest()
                wait(1)
                takeQuest()
                resetNotifiedEnemies()
            end

            -- Combat logic
            local targetFound = false
            for _, enemy in ipairs(aiCharacters:GetChildren()) do
                if enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                    ensureCharacterIsAlive() -- Ensure character is alive before engaging in combat
                    if isBoss(enemy) or isSpecialEnemy(enemy) then
                        if not notifiedEnemies[enemy] then
                            sendNotification("Combat", "Engaging special enemy: " .. enemy.Name)
                            notifiedEnemies[enemy] = true
                        end
                        targetFound = true
                        attackEnemy(enemy)
                        break
                    end
                end
            end

            -- Fallback to quest-specific enemies
            if not targetFound and hasQuest() and not isQuestCompleted() then
                for _, enemy in ipairs(aiCharacters:GetChildren()) do
                    if enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                        ensureCharacterIsAlive() -- Ensure character is alive before attacking quest enemies
                        for _, targetName in ipairs(targetEnemies) do
                            if enemy.Name:find(targetName) then
                                attackEnemy(enemy)
                                if isQuestCompleted() then
                                    completeQuest()
                                    takeQuest()
                                    resetNotifiedEnemies()
                                    break
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(0.1) -- Small delay to prevent CPU overload
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent then
        if input.KeyCode == Enum.KeyCode.T then
            toggle = not toggle
            sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        end
    end
end)

monitorHealth()
