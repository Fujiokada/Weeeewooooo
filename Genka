-- External executor script

-- References to folders and specific parts
local clovaFolder = game:GetService("Workspace"):WaitForChild("clova")
local buttonsFolder = game:GetService("Workspace"):WaitForChild("Buttons")
local rollRarityTouch = game:GetService("Workspace")["Roll System"]:WaitForChild("RollRarity")

local player = game.Players.LocalPlayer -- Reference to the player
local character = player.Character or player.CharacterAdded:Wait() -- Ensure character is loaded
local rootPart = character:WaitForChild("HumanoidRootPart") -- Get the player's root part

local FIRE_RADIUS = 200 -- Radius within which parts will be processed
local REBIRTH_INTERVAL = 5 -- Time interval for rebirth button firing
local EXCEPTION_NAMES = {["Super Multi Get"] = true, ["Prestige Get"] = true} -- Button exceptions

-- Button priority order
local multiplierButtons = {
    "Rare", "Legendary", buttonsFolder:GetChildren()[20], "Ultimate", "Overdrive", "Unknown",
    buttonsFolder:GetChildren()[45], "Celestial", "Overlord", "50", "64",
    buttonsFolder:GetChildren()[31], buttonsFolder:GetChildren()[32], buttonsFolder:GetChildren()[33],
    "160", "200"
}

local rebirthButtons = {
    buttonsFolder:GetChildren()[12], buttonsFolder:GetChildren()[6], "Rebirth1", "Rebirth2",
    "Rebirth Upgrade 6", "Rebirth Upgrade 7"
}

local rebirthButton = buttonsFolder["Rebirth Get"]

-- Function to process TouchTransmitter of a given part
local function processTouchTransmitter(part)
    local touchTransmitter = part:FindFirstChildOfClass("TouchTransmitter") -- Find TouchTransmitter
    if touchTransmitter then
        -- Fire the TouchTransmitter
        firetouchinterest(part, rootPart, 0)
        firetouchinterest(part, rootPart, 1)
    end
end

-- Function to cycle through multiplier buttons continuously
local function cycleMultiplierButtons()
    while true do
        for _, buttonName in ipairs(multiplierButtons) do
            local button = typeof(buttonName) == "string" and buttonsFolder:FindFirstChild(buttonName) or buttonName
            if button and button:IsA("BasePart") then
                processTouchTransmitter(button)
            end
        end
        wait() -- Allow rapid cycling
    end
end

-- Function to cycle through rebirth upgrades continuously
local function cycleRebirthUpgrades()
    while true do
        for _, buttonName in ipairs(rebirthButtons) do
            local button = typeof(buttonName) == "string" and buttonsFolder:FindFirstChild(buttonName) or buttonName
            if button and button:IsA("BasePart") then
                processTouchTransmitter(button)
            end
        end
        wait() -- Allow rapid cycling
    end
end

-- Function to handle rebirth button with interval
local function fireRebirthButton()
    while true do
        if rebirthButton and rebirthButton:IsA("BasePart") then
            processTouchTransmitter(rebirthButton)
        end
        wait(REBIRTH_INTERVAL) -- Fire only every 5 seconds
    end
end

-- Function to monitor the clova folder
local function monitorClovaFolder()
    while true do
        for _, model in ipairs(clovaFolder:GetChildren()) do
            if model:IsA("Model") then
                local rootPart = model:FindFirstChildWhichIsA("BasePart") -- Handle any BasePart
                if rootPart then
                    processTouchTransmitter(rootPart)
                end
            end
        end
        wait(1) -- Independent loop delay
    end
end

-- Function to handle the RollRarity TouchInterest
local function monitorRollRarity()
    while true do
        if rollRarityTouch and rollRarityTouch:IsA("BasePart") then
            processTouchTransmitter(rollRarityTouch)
        end
        wait(1) -- Independent loop delay
    end
end

-- Start all functions in independent threads
task.spawn(cycleMultiplierButtons)
task.spawn(cycleRebirthUpgrades)
task.spawn(fireRebirthButton)
task.spawn(monitorClovaFolder)
task.spawn(monitorRollRarity)
